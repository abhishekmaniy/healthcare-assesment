generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  auth0Id   String   @unique @map("auth0_id")
  name      String
  email     String   @unique
  role      Role     @default(NURSE)
  picture   String?
  shifts    Shift[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum Role {
  DOCTOR
  NURSE
  PARAMEDIC
  TECHNICIAN
  SUPPORT_STAFF
  PHARMACIST
  THERAPIST
  ADMINISTRATIVE
  HCA
}

/*
  WorkerType:
  - A row for each staff type you want to manage location constraints for.
  - Do NOT create a row for ADMINISTRATIVE if you want admins to have no location restriction.
*/
model WorkerType {
  id        String     @id @default(cuid())
  role      Role       @unique
  label     String?
  zone      WorkerZone?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("worker_types")
}

/*
  WorkerZone:
  - Stores the perimeter (latitude, longitude, radius in meters) for the corresponding WorkerType.
  - One-to-one relationship: one zone per worker type.
*/
model WorkerZone {
  id           String     @id @default(cuid())
  workerTypeId String     @unique
  workerType   WorkerType @relation(fields: [workerTypeId], references: [id])
  latitude     Float
  longitude    Float
  radius       Float      // in meters
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("worker_zones")
}

/*
  Shift:
  - History of clock-ins / clock-outs.
  - clockOut may be null (active shift).
  - Contains coordinates for both clock in and clock out (optional).
*/
model Shift {
  id           String    @id @default(cuid())
  clockIn      DateTime
  clockOut     DateTime?
  clockInLat   Float
  clockInLng   Float
  clockOutLat  Float?
  clockOutLng  Float?
  clockInNote  String?
  clockOutNote String?
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("shifts")
}
